1. 关于加密信息的配置：在Spring Boot项目中很多属性文件需要存放敏感信息，此时可以对信息进行加密。
导入依赖
<dependency>
	<groupId>com.github.ulisesbocchio</groupId>
	<artifactId>jasypt-spring-boot-starter</artifactId>
	<version>3.0.5</version>
</dependency>

之后可以简单计算出所需要的密文
import org.jasypt.encryption.pbe.PooledPBEStringEncryptor;
import org.jasypt.encryption.pbe.config.SimpleStringPBEConfig;

public class Test {
    public static void main(String[] args) {
        PooledPBEStringEncryptor encryptor = new PooledPBEStringEncryptor();
        SimpleStringPBEConfig config = new SimpleStringPBEConfig();

        config.setAlgorithm("PBEWITHHMACSHA512ANDAES_256");
        config.setPassword("h3Ag!.3WT_sJZE@rWQPHM6d*");
        config.setKeyObtentionIterations("1000");
        config.setPoolSize("1");
        config.setProviderName("SunJCE");
        config.setSaltGeneratorClassName("org.jasypt.salt.RandomSaltGenerator");
        config.setIvGeneratorClassName("org.jasypt.iv.RandomIvGenerator");
        config.setStringOutputType("base64");
        encryptor.setConfig(config);

        System.out.println(encryptor.encrypt("your info"));
    }

}

之后就可以在Spring Boot项目的配置文件中添加
jasypt:
  encryptor:
    password: h3Ag!.3WT_sJZE@rWQPHM6d*
    algorithm: PBEWITHHMACSHA512ANDAES_256
    bootstrap: true
    provider-name: SunJCE
    pool-size: 1
    key-obtention-iterations: 1000
    salt-generator-classname: org.jasypt.salt.RandomSaltGenerator
    iv-generator-classname: org.jasypt.iv.RandomIvGenerator
    string-output-type: base64

在@Configuration注解的类上添加
@EnableEncryptableProperties
或者
@EncryptablePropertySources({
        @EncryptablePropertySource("classpath:application.yml"),
        @EncryptablePropertySource("classpath:application.properties")})
之后可以在属性文件中使用密钥


1. 在github上建立仓库spring-cloud-config
在本地某文件夹建立如下文件：
spring-cloud-config-dev.properties，文件内容如下：
username=tom-dev

spring-cloud-config-prod.properties，文件内容如下：
username=tom-prod

spring-cloud-config-master.properties，文件内容如下：
username=tom-master

spring-cloud-config-test.properties，文件内容如下：
username=tom-test

spring-cloud-config一般是某个具体项目的名字，比如water，house等项目名称。dev，prod，master，test分别代表不同环境。
文件的扩展名可以是yml或者properties，文件内容一般可以包含数据库用户名等信息

2, 项目中添加application.yml文件，内容如下：
server:
  port: 8888
spring:
  cloud:
    config:
      server:
        git:
          uri: https://github.com/OrangeCat0517/spring-cloud-config.git
          search-paths: spring-cloud-config  #查找路径
      label: main  #此处是上传到github中的分支名称，我们的仓库中是main分支
    zookeeper:
      connect-string: localhost:2181,localhost:2182,localhost:2183

3. main类上加入注解
@SpringBootApplication
@EnableDiscoveryClient
@EnableConfigServer

4. 启动main方法
5. 访问
http://localhost:8888/main/spring-cloud-config-dev.properties
http://localhost:8888/main/spring-cloud-config-master.properties
http://localhost:8888/main/spring-cloud-config-test.properties
注意main是我们上传到github中的分支名称，我们的仓库中是main分支，之后是我们上传的文件名